### Решение задачи "Best Time to Buy and Sell Stock with Cooldown"

Задача:  
У вас есть массив цен акций prices, где prices[i] — цена акции в день i. Вы можете совершать неограниченное количество сделок (покупать и продавать), но после каждой продажи требуется один день "охлаждения" (cooldown), в течение которого вы не можете покупать акции. Цель — максимизировать прибыль.

Подход с динамическим программированием:  
Используем три состояния, чтобы отслеживать максимальную прибыль на конец каждого дня:
1. hold — у нас есть акция (купили сегодня или держали ранее).
2. sold — продали акцию сегодня.
3. rest — у нас нет акции, и сегодня не продавали (отдых после продажи или бездействие).

Переходы между состояниями:
- hold:
  - Уже держали акцию с предыдущего дня: hold.
  - Купили сегодня: значит, вчера были в состоянии rest (после cooldown): rest - prices[i].
  - Формула: hold = max(previous_hold, previous_rest - prices[i]).
- sold:
  - Продали сегодня: значит, вчера держали акцию: previous_hold + prices[i].
  - Формула: sold = previous_hold + prices[i].
- rest:
  - Отдыхали вчера и сегодня: previous_rest.
  - Вчера продали (сегодня cooldown): previous_sold.
  - Формула: rest = max(previous_rest, previous_sold).

Инициализация (день 0):
- hold = -prices[0] (купили акцию в день 0).
- sold = -infinity (невозможно продать в день 0).
- rest = 0 (бездействовали).

Алгоритм:
1. Инициализируем переменные для дня 0.
2. Для каждого последующего дня обновляем состояния:
   - Новый hold = максимум из старого hold и (`rest` минус текущая цена).
   - Новый sold = старый hold плюс текущая цена.
   - Новый rest = максимум из старого rest и старого sold.
3. Ответ — максимум из sold и rest в последний день (держать акцию в конце невыгодно).

Пример для цен [1, 2, 3, 0, 2]:
- День 0:  
  hold = -1, sold = -inf, rest = 0.
- День 1 (цена=2):  
  hold = max(-1, 0-2) = -1,  
  sold = -1 + 2 = 1,  
  rest = max(0, -inf) = 0.
- День 2 (цена=3):  
  hold = max(-1, 0-3) = -1,  
  sold = -1 + 3 = 2,  
  rest = max(0, 1) = 1.
- День 3 (цена=0):  
  hold = max(-1, 1-0) = 1,  
  sold = -1 + 0 = -1,  
  rest = max(1, 2) = 2.
- День 4 (цена=2):  
  hold = max(1, 2-2) = 1,  
  sold = 1 + 2 = 3,  
  rest = max(2, -1) = 2.
- Ответ: max(3, 2) = 3.

Итог:  
Алгоритм проходит по дням один раз, обновляя три состояния. Сложность — O(n), где n — количество дней. Пространственная сложность — O(1) (используются три переменные).


function maxProfit(prices) {
    let buy1 = -Infinity;
    let profit1 = 0;
    let buy2 = -Infinity;
    let profit2 = 0;

    for (let price of prices) {
        buy1 = Math.max(buy1, -price);
        profit1 = Math.max(profit1, buy1 + price);
        buy2 = Math.max(buy2, profit1 - price);
        profit2 = Math.max(profit2, buy2 + price);
    }

    return profit2;
}
